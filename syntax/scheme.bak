" Vim syntax file
" Language:     Scheme (R5RS)
" Last Change:  17.12.2006
" Maintainer:   JÃ¶rn Horstmann <joern_h@gmx.net>
" Original author: Sergey Khorev <sergey.khorev@gmail.com>
" Original author: Dirk van Deun <dirk@igwe.vub.ac.be>

" Initializing:

" For version 5.x: Clear all syntax items
" For version 6.x: Quit when a syntax file was already loaded
"if version < 600
"  syntax clear
"elseif exists("b:current_syntax")
"  finish
"endif

"syn case ignore

syn match schemeError oneline '[^ \t()\[\]";]\+'
"syn match schemeNull "'()" display
syn region schemeList matchgroup=schemeDelimiter start="['`]\?#\?("  end=")"  contains=ALLBUT,schemeCommentNested
syn region schemeList matchgroup=schemeDelimiter start="['`]\?#\?\[" end="\]" contains=ALLBUT,schemeCommentNested

" syntax-case
syn region schemeList matchgroup=schemeDelimiter start="#['`]("  end=")"  contains=ALLBUT,schemeCommentNested
syn region schemeList matchgroup=schemeDelimiter start="#['`]\[" end="\]" contains=ALLBUT,schemeCommentNested
syn match schemeSymbol "#'\k\+" display

syn match schemeSymbol "'\k\+" display
syn match schemeVariable "\k\+" display

syn match schemeSpecial "|\k\+|" display
syn match schemeSpecial "[!$%&/:<=>?^_~]\k\+" display
syn match schemeSpecial "#\k\+"

syn match schemeConstant "\*\k\+\*" display
syn match schemeUnquoteVariable ",\k\+" display
syn match schemeBoolean '#[tf]' display
syn match schemeEllipsis '\.\.\.' display

syn region schemeString start='"' skip='\\"' end='"' contains=schemeStringEscape
syn match  schemeStringEscape '\\.' contained

syn region schemeCommentML start="#|"   end="|#"
syn match  schemeCommentSL oneline ";.*$" display
syn region schemeCommentNested matchgroup=Comment start="("    end=")" contained contains=schemeCommentNested transparent keepend extend
syn region schemeCommentExpr   matchgroup=schemeDelimiter start="#;("  end=")" contains=schemeCommentNested keepend extend
syn region schemeCommentExpr   matchgroup=schemeDelimiter start="#;\[" end="\]" contains=schemeCommentNested keepend extend

" This is a useful lax approximation:
syn match schemeNumber  oneline    "\<[-#+0-9.][-#+/0-9a-f@i.boxesfdl]*\>" display
syn match schemeChar    oneline    "#\\." display
syn match schemeChar    oneline    "#\\space" display
syn match schemeChar    oneline    "#\\backspace" display
syn match schemeChar    oneline    "#\\newline" display
syn match schemeChar    oneline    "#\\tab" display
syn match schemeChar    oneline    "#\\return" display

syn region schemeUnquoteList start=",@\?("  end=")"  contains=ALLBUT,schemeCommentNested
syn region schemeUnquoteList start=",@\?\[" end="\]" contains=ALLBUT,schemeCommentNested

syn region schemeUnquote start=",@\?(" end=")" contains=ALLBUT,schemeCommentNested

" R5RS Scheme Functions and Syntax:

if version < 600
  set iskeyword=33,36-38,42-58,60-90,94,95,97-122,124,126,_
else
  setlocal iskeyword=33,36-38,42-58,60-90,94,95,97-122,124,126,_
endif

syn keyword schemeSyntax lambda and or if cond case define let let* letrec
syn keyword schemeSyntax begin do delay set! else =>
syn keyword schemeSyntax quote quasiquote unquote unquote-splicing
syn keyword schemeSyntax define-syntax let-syntax letrec-syntax syntax-rules

syn keyword schemeFunc not boolean? eq? eqv? equal? pair? cons car cdr set-car!
syn keyword schemeFunc set-cdr! caar cadr cdar cddr caaar caadr cadar caddr
syn keyword schemeFunc cdaar cdadr cddar cdddr caaaar caaadr caadar caaddr
syn keyword schemeFunc cadaar cadadr caddar cadddr cdaaar cdaadr cdadar cdaddr
syn keyword schemeFunc cddaar cddadr cdddar cddddr null? list? list length
syn keyword schemeFunc append reverse list-ref memq memv member assq assv assoc
syn keyword schemeFunc symbol? symbol->string string->symbol number? complex?
syn keyword schemeFunc real? rational? integer? exact? inexact? = < > <= >=
syn keyword schemeFunc zero? positive? negative? odd? even? max min + * - / abs
syn keyword schemeFunc quotient remainder modulo gcd lcm numerator denominator
syn keyword schemeFunc floor ceiling truncate round rationalize exp log sin cos
syn keyword schemeFunc tan asin acos atan sqrt expt make-rectangular make-polar
syn keyword schemeFunc real-part imag-part magnitude angle exact->inexact
syn keyword schemeFunc inexact->exact number->string string->number char=?
syn keyword schemeFunc char-ci=? char<? char-ci<? char>? char-ci>? char<=?
syn keyword schemeFunc char-ci<=? char>=? char-ci>=? char-alphabetic? char?
syn keyword schemeFunc char-numeric? char-whitespace? char-upper-case?
syn keyword schemeFunc char-lower-case?
syn keyword schemeFunc char->integer integer->char char-upcase char-downcase
syn keyword schemeFunc string? make-string string string-length string-ref
syn keyword schemeFunc string-set! string=? string-ci=? string<? string-ci<?
syn keyword schemeFunc string>? string-ci>? string<=? string-ci<=? string>=?
syn keyword schemeFunc string-ci>=? substring string-append vector? make-vector
syn keyword schemeFunc vector vector-length vector-ref vector-set! procedure?
syn keyword schemeFunc apply map for-each call-with-current-continuation
syn keyword schemeFunc call-with-input-file call-with-output-file input-port?
syn keyword schemeFunc output-port? current-input-port current-output-port
syn keyword schemeFunc open-input-file open-output-file close-input-port
syn keyword schemeFunc close-output-port eof-object? read read-char peek-char
syn keyword schemeFunc write display newline write-char call/cc
syn keyword schemeFunc list-tail string->list list->string string-copy
syn keyword schemeFunc string-fill! vector->list list->vector vector-fill!
syn keyword schemeFunc force with-input-from-file with-output-to-file
syn keyword schemeFunc char-ready? load transcript-on transcript-off eval
syn keyword schemeFunc dynamic-wind port? values call-with-values
syn keyword schemeFunc scheme-report-environment null-environment
syn keyword schemeFunc interaction-environment

" SISC extensions
syn keyword schemeSyntax require-library module import

" Synchronization and the wrapping up...

" syn sync match matchPlace grouphere NONE "^[^ \t]"
syn sync match matchPlace grouphere NONE "(define"
" ... i.e. synchronize on a line that starts at the left margin

" Define the default highlighting.
" For version 5.7 and earlier: only when not done already
" For version 5.8 and later: only when an item doesn't have highlighting yet
if version >= 508 || !exists("did_scheme_syntax_inits")
  if version < 508
    let did_scheme_syntax_inits = 1
    command -nargs=+ HiLink hi link <args>
  else
    command -nargs=+ HiLink hi def link <args>
  endif

  HiLink schemeSyntax    Statement
  "HiLink schemeNull      Statement
  HiLink schemeFunc      Function

  HiLink schemeString    String
  HiLink schemeChar      Character
  HiLink schemeNumber    Number
  HiLink schemeBoolean   Boolean
  HiLink schemeSpecial   Special
  HiLink schemeStringEscape Special
  HiLink schemeSymbol    PreProc

  HiLink schemeDelimiter Delimiter
  HiLink schemeConstant  Constant

  HiLink schemeCommentSL   Comment
  HiLink schemeCommentML   Comment

  HiLink schemeCommentExpr   Comment
  HiLink schemeError     Error

  delcommand HiLink
endif

let b:current_syntax = "scheme"
